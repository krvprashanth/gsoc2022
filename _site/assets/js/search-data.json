{"0": {
    "doc": "Community Bonding Period",
    "title": "Community Bonding Period",
    "content": "May 20 - June 12 . | GSoC 2022 accepted Contributors announced! | My GSoC proposal Building Bela Images accepted. | Sent shipping address details to the org and mentor. | Community Bonding Period begined, a video conference was held with BeagleBoard Community members, mentors and accepted students of GSoC’22. | Created this project web page. | Read the Building Beagle-based embedded linux systems. | Started reading about U-Boot, Debootstrap and study how to use it. | I have to read and write bash scripts during the project. Read these books/guides to Improve bash/command-line skills. | https://linuxcommand.org/tlcl.php | https://www.gnu.org/software/bash/manual/bash.pdf | https://en.wikibooks.org/wiki/Bash_Shell_Scripting | . | Attended GSoC 2022 Contributor Summit. | Reached out to mentors regarding the following: . | How often we should have meeting for the project progress and doubts. | And, also to schedule a meet with Bela community as well as I really wanna know a lot, and to trully understand the motive behind the Bela platform. | Scheduled a calender Invite for rugular weekly meeting with mentors. | . | Last community bonding meet was in BeagleBoard slack channel. | Created an account in BeagleBoard gitlab Instance https://git.beagleboard.org and a project repo up here for issue tracking of the blockers while building Images. | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/Community%20Bonding%20Period/#community-bonding-period",
    "relUrl": "/docs/weeklyprogress/Community%20Bonding%20Period/#community-bonding-period"
  },"1": {
    "doc": "Community Bonding Period",
    "title": "Community Bonding Period",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/Community%20Bonding%20Period/",
    "relUrl": "/docs/weeklyprogress/Community%20Bonding%20Period/"
  },"2": {
    "doc": "Pre Selection",
    "title": "Pre Selection",
    "content": ". | I came across the BeagleBoard project for this year’s Google Summer of Code and found the project titled Building Bela Images quite interesting to me and i checked BeagleBoard/GSoC/Ideas-2022 wiki to find are there any initial application tasks to do anything related to Building Bela Image and asked in beagleboard-gsoc slack channel to provide me with some small tasks related to the project to do. | Got in touch with Giulio Moro and Dhruva Gole, started looking at Bela Platform projects and tried to understand the sprit behind these debian based distributions (bela, beagleboard images) and listed out features, somehow got familiar with code base. | Setuped build environment on my machine to rebuild bela, beagleboard images and I tried some ways to boot Images using QEMU emulator and that didn’t worked out as I don’t have hardware to test the image. | I acquainted myself with BeagleBoard.org and BELA and on what projects currently the community working and the products they both built till then. | Drafted my proposal and asked for suggestion and feedback from Guiliomoro and Dhruva Goel. | After, feedback I updated my proposal with necessary corrections and necessary topics to work on as mentioned and submitted proposal on GSoC website. | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/Pre%20Selection/#pre-selection",
    "relUrl": "/docs/weeklyprogress/Pre%20Selection/#pre-selection"
  },"3": {
    "doc": "Pre Selection",
    "title": "Pre Selection",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/Pre%20Selection/",
    "relUrl": "/docs/weeklyprogress/Pre%20Selection/"
  },"4": {
    "doc": "Bela Image Builder",
    "title": "Table of Contents",
    "content": ". | Notes on Bela Image Build Process | . ",
    "url": "http://localhost:4000/docs/documentation/bela-image-builder/#table-of-contents",
    "relUrl": "/docs/documentation/bela-image-builder/#table-of-contents"
  },"5": {
    "doc": "Bela Image Builder",
    "title": "Bela Image Builder",
    "content": ". ",
    "url": "http://localhost:4000/docs/documentation/bela-image-builder/",
    "relUrl": "/docs/documentation/bela-image-builder/"
  },"6": {
    "doc": "Debian Packaging",
    "title": "Table of Contents",
    "content": " ",
    "url": "http://localhost:4000/docs/documentation/debian-packaging/#table-of-contents",
    "relUrl": "/docs/documentation/debian-packaging/#table-of-contents"
  },"7": {
    "doc": "Debian Packaging",
    "title": "Debian Packaging",
    "content": ". ",
    "url": "http://localhost:4000/docs/documentation/debian-packaging/",
    "relUrl": "/docs/documentation/debian-packaging/"
  },"8": {
    "doc": "How-To Guides",
    "title": "Table of Contents",
    "content": ". | ARM Cross-Compilation on Debian x86 Machine | Find SD card device name | . Quick-wiki: ARM Cross-Compilation on Debian x86 Machine . The latest versions of DebianDebian has excellent support for cross-building through Debian Cross-toolchains ( see wiki: https://wiki.debian.org/ToolChain/Cross ). Toolchains are set of software development tools and libraries (such as gcc , gdb , glibc ) that are chained together to enable you to build executable code on one operating system on one type of machine, such as a 64-bit Linux OS on an Intel x86 machine, but to execute them on a different operating system and/or a different architecture, such as a 32-bit Linux OS on an ARM device. Debian cross toolchain is a good starting point. We can list the available toolchains as follows: . prashanth@krv:~$ apt-cache search cross-build-essential crossbuild-essential-amd64 - Informational list of cross-build-essential packages crossbuild-essential-arm64 - Informational list of cross-build-essential packages crossbuild-essential-armel - Informational list of cross-build-essential packages crossbuild-essential-armhf - Informational list of cross-build-essential packages crossbuild-essential-i386 - Informational list of cross-build-essential packages crossbuild-essential-powerpc - Informational list of cross-build-essential packages crossbuild-essential-ppc64el - Informational list of cross-build-essential packages crossbuild-essential-s390x - Informational list of cross-build-essential packages crossbuild-essential-mips - Informational list of cross-build-essential packages crossbuild-essential-mips64 - Informational list of cross-build-essential packages crossbuild-essential-mips64el - Informational list of cross-build-essential packages crossbuild-essential-mips64r6 - Informational list of cross-build-essential packages crossbuild-essential-mips64r6el - Informational list of cross-build-essential packages crossbuild-essential-mipsel - Informational list of cross-build-essential packages crossbuild-essential-mipsr6 - Informational list of cross-build-essential packages crossbuild-essential-mipsr6el - Informational list of cross-build-essential packages . The main purpose of these packages is to allow cross-compiling of Linux programs for different architecture distributions, but these can be used also for bare metal programming. One thing to be aware is the fact that the compiler by default tries to link the Linux standard C libraries that in bare metal programming have no use. Here, I’m using ARM hard float ( armhf ) package for writing programs that is deployed to the Beagle boards. prashanth@krv:~$ sudo apt install crossbuild-essential-armhf Preparing to unpack .../crossbuild-essential-armhf_12.9_all.deb ... Unpacking crossbuild-essential-armhf (12.9) ... Setting up crossbuild-essential-armhf (12.9) ... Test installation by calling the compiler directly. prashanth@krv:~$ arm-linux-gnueabihf-g++ -v COLLECT_GCC=arm-linux-gnueabihf-g++ Thread model: posix gcc version 10.2.1 20210110 (Debian 10.2.1-6) . I’m writing a short C++ program, testcross.cpp , which can be compiled into binary code using the cross-compiler. prashanth@krv:~$ gedit testcross.cpp prashanth@krv:~$ more testcross.cpp #include&lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Testing cross compilation for armhf\" &lt;&lt; endl; return 0; } prashanth@krv:~$ arm-linux-gnueabihf-g++ testcross.cpp -o testcross prashanth@krv:~$ ls -l testcross* -rwxr-xr-x 1 prashanth prashanth 9064 Apr 5 13:02 testcross -rw-r--r-- 1 prashanth prashanth 119 Apr 5 13:00 testcross.cpp . The binary file has an executable flag, but when the binary is invoked, it fails to execute. This is unsurprising, as we are attempting to execute ARM binary instructions on an Intel x86 machine. prashanth@krv:~$ ./testcross arm-binfmt-P: Could not open '/lib/ld-linux-armhf.so.3': No such file or directory . This error indicates that the ld-linux-armhf.so.3 file is not in the system library directory. A search of the filesystem locates it in the /usr/arm-linux-gnueabihf/lib/ directory. prashanth@krv:~$ stat /usr/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3 File: /usr/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3 -&gt; ld-2.31.so Size: 10 Blocks: 0 IO Block: 4096 symbolic link Device: b302h/45826d Inode: 1447823 Links: 1 Access: (0777/lrwxrwxrwx) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2022-04-05 13:02:21.727259593 +0530 Modify: 2021-03-03 17:24:20.000000000 +0530 Change: 2022-03-29 20:49:01.659052574 +0530 Birth: 2022-03-29 20:49:01.631052872 +0530 . One approach to solve this issue is to explicitly call the QEMU tool and specify the library directory, whereupon the program is emulated correctly. prashanth@krv:~$ qemu-arm-static -L /usr/arm-linux-gnueabihf/ testcross Testing cross compilation for armhf . Success! If we see this output, then we are able to build a binary on the x86 machine that can be executed directly on the ARM machine. Find SD card device name . The SD card is an essential part of the Embedded Linux Systems. It’s often necessary to copy(or “flash”) the software from our machine to an SD card for use in Embedded Linux System, or to back up projects ot the entire contents of SD card. This guide is about to find the SD card’s device name! choosing the wrong drive will likely result in data loss or even worse harm to our machine. My machine has an Integrated SD card reader and it is connected by a multiport USB unit and will be presented as /dev/sdx, where X is a single letter. The first hard drive is often /dev/sda. In most of the machines with SD card slots, this wiil be often be /dev/mmcblk0. I find the following method to be handy and simple: . Step1: Open a terminal . Step2: Get the list of existing devices in our system into a temporary file (say, /tmp/before_sd): . prashanth@krv:~$ ls /dev &gt; /tmp/before_sd . Step3: Insert SD card (be it via an external reader or directly to the SD port of your computer) . Step4: Get again the list of devices into a second temporary file (say, /tmp/after_sd): . prashanth@krv:~$ ls /dev &gt; /tmp/after_sd . Step5: Compare them . prashanth@krv:~$ diff /tmp/before_sd /tmp/after_sd 36a37,39 &gt; mmcblk0 &gt; mmcblk0p1 &gt; mmcblk0p2 . Or, if the device follows sdX, it would be: . prashanth@krv:~$ diff /tmp/before_sd /tmp/after_sd 55a57,59 &gt; sda &gt; sda1 . Note: The topmost name we received - In my case, sda. That’s the device we want to write to! (the other devices will point to partitions within the media we inserted). ",
    "url": "http://localhost:4000/docs/documentation/how-to-guides/#table-of-contents",
    "relUrl": "/docs/documentation/how-to-guides/#table-of-contents"
  },"9": {
    "doc": "How-To Guides",
    "title": "How-To Guides",
    "content": ". ",
    "url": "http://localhost:4000/docs/documentation/how-to-guides/",
    "relUrl": "/docs/documentation/how-to-guides/"
  },"10": {
    "doc": "Weekly Progress",
    "title": "Weekly Progress",
    "content": "These are the logs of my project, where I provide weekly report on the work done. ",
    "url": "http://localhost:4000/docs/weeklyprogress/",
    "relUrl": "/docs/weeklyprogress/"
  },"11": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": ". This documentation is about the new learning(s) and issue(s) resolvings on different aspects of project, and personal thoughts. It includes(or/with links): Personal Public thoughts, Artciles, Research in building embedded Linux systems(&amp; resources), Programming(issues and code), Advanced Linux commands, bash script command utilization, Linux packages(&amp; scripts), Embedded Systems, text documentation, images, tutorial(links) and git links(Personal Pubic repository links). Note : This documentation is mainly intend to reduce time consumption for solving some issues which are already solved/used earlier, This is from my past experience of wasting my time for searching for issues solving and code shown/contributed/used are somtimes exculsively with Debian GNU/Linux and may not work with other Debian based systems or other Linux distributions. ",
    "url": "http://localhost:4000/docs/documentation/",
    "relUrl": "/docs/documentation/"
  },"12": {
    "doc": "Blog",
    "title": "Blog | Google Summer of Code 2022",
    "content": "My Journey with Bela &amp; BeagleBoard . ",
    "url": "http://localhost:4000/docs/blog/#blog--google-summer-of-code-2022",
    "relUrl": "/docs/blog/#blog--google-summer-of-code-2022"
  },"13": {
    "doc": "Blog",
    "title": "Blog",
    "content": " ",
    "url": "http://localhost:4000/docs/blog/",
    "relUrl": "/docs/blog/"
  },"14": {
    "doc": "Contact",
    "title": "Contacts",
    "content": ". | Email ID: krvprashanth@riseup.net | . | Number: 7993780016 | . | BeagleBoard Slack: @krvprashanth | . | Matrix: @krvprashanth:matrix.org | . ",
    "url": "http://localhost:4000/docs/contact/#contacts",
    "relUrl": "/docs/contact/#contacts"
  },"15": {
    "doc": "Contact",
    "title": "Contact",
    "content": " ",
    "url": "http://localhost:4000/docs/contact/",
    "relUrl": "/docs/contact/"
  },"16": {
    "doc": "Home",
    "title": "Building Bela Images",
    "content": " ",
    "url": "http://localhost:4000/#building-bela-images",
    "relUrl": "/#building-bela-images"
  },"17": {
    "doc": "Home",
    "title": "GSoC’2022 | BeagleBoard.org",
    "content": ". Hello people! I am Kurva Prashant, a third-year undergraduate student of the Vidya Jyothi Institute of Technology, Hyderabad, India. I am glad to share that I have been accepted for Google Summer of Code 2022 at BeagleBoard.org and I am really excited to spend this summer well contributing to FOSS and working on the project “Building Bela Images”. This web page describes my journey with Bela, BeagleBoard and the project which I contributing for in Google Summer of Code 2022. This was my first time to apply for GSoC and it was such a delight to get accepted, and I hope I can contribute to the project, achieving the desired goals. My project is co-mentored by Giulio Moro, Vedant Paranjape, and Vaishnav Achath from the following organizations: . | BELA | BeagleBoard | . ",
    "url": "http://localhost:4000/#gsoc2022--beagleboardorg",
    "relUrl": "/#gsoc2022--beagleboardorg"
  },"18": {
    "doc": "Home",
    "title": "My Introduction to GNU/Linux",
    "content": ". I was Introduced to the world of GNU/Linux in 2019 when I was started learning Robotics and Visual Navigation on low end machine which running “slow” due to the bloatware of windows in it. And, I stopped using the windows, removed it and started using Debian with XFCE desktop environment till then. ",
    "url": "http://localhost:4000/#my-introduction-to-gnulinux",
    "relUrl": "/#my-introduction-to-gnulinux"
  },"19": {
    "doc": "Home",
    "title": "My Introduction to Open Hardware &amp; Embedded Linux",
    "content": ". I got to know about Open Hardware and Embedded Linux while learning electronics and embedded systems part of robotics. I didn’t pay much attention to it at that time and quickly moved on. After this a short talk on Liberating SBC’s using Debian by Yuvraj at MiniDebConf India 2021 which focused on Open Source Hardware like Olimex and the Debian distributions for arm based single board computers has intrigued me to start working on Open Hardware and Embedded Linux. ",
    "url": "http://localhost:4000/#my-introduction-to-open-hardware--embedded-linux",
    "relUrl": "/#my-introduction-to-open-hardware--embedded-linux"
  },"20": {
    "doc": "Home",
    "title": "Past Experience with Debian",
    "content": ". I have an experience with Debian live build system and customized my low end machine with robotics and networking packages in which it installed Debian 11 “Bullseye” with XFCE Desktop environment on it and I’m just curious to work on low end hardware, optimise software to make run very well on resource constrained devices and also porting and enabled the Government School Computer labs in our locality to specific use of free softwares and Installing BalaSwecha OS ( A GNU/Linux distribution based on Debian ). ",
    "url": "http://localhost:4000/#past-experience-with-debian",
    "relUrl": "/#past-experience-with-debian"
  },"21": {
    "doc": "Home",
    "title": "Applying for Google Summer of Code",
    "content": ". I came to know GSoC through Swecha, a vibrant community of software users, students, academicians and software developers who determined to provide quality software built on the guidelines of free software development model. I decided to apply this year after some searching I came across the BeagleBoard project Ideas wiki for GSoC 2022 and found the project title “Building Bela Images” quite interesting to me and submitted a proposal about it. Since, I was working on Single Board Computers and linux distributions, I had the necessary experience to make this possible. Now, I will cover some information about my GSoC Project. ",
    "url": "http://localhost:4000/#applying-for-google-summer-of-code",
    "relUrl": "/#applying-for-google-summer-of-code"
  },"22": {
    "doc": "Home",
    "title": "My GSoC Project",
    "content": "Overview . I will be working on Bela Image development to make Bela Image follow more closely with BeagleBoard Images. The Bela Image development repo is heavily based and which was initially inspired by Beagleboard Image-builder scripts. Currently, the Beagle board Image development repo diverged greatly from a common functionalities of building Images. There is a requirement to “rebase” the functionalities of the Bela Image builder repo to the Beagleboard Image builder one. As the two codebases are drastically different we need to understand and “semantic rebase” the features of the Bela Image builder repo (xenomai kernel building scripts along with a bunch of other stuff) to Beagleboard Image builder repo. After these changes the Bela Image development will follow more closely with the Beagleboard Image development and as a result Bela Image will be updated more often and it minimizes future development effort. Goals . In order to add the Bela Image builder features to BeagleBoard Image builder. Firstly, I’ll be building Bela Image by using BeagleBoard Image builder scripts and making necessary changes in scripts to build Image. After this I will be getting a clear idea to where to change and semantic rebase the features of Bela Image builder to BeagleBoard Image builder one. Benefit . This project adds support for the Bela Image development to make Bela Image follow more closely with BeagleBoard Images. I mean after Bela specific changes made conditional to the Image-builder repository. The Bela Image development will be updated more often, more easily in parallel with BeagleBoard Images. ",
    "url": "http://localhost:4000/#my-gsoc-project",
    "relUrl": "/#my-gsoc-project"
  },"23": {
    "doc": "Home",
    "title": "Helpful Links",
    "content": ". | Original GSoC Project idea | https://github.com/BelaPlatform | https://bela.io | https://github.com/beagleboard/image-builder | https://github.com/BelaPlatform/bela-image-builder | . ",
    "url": "http://localhost:4000/#helpful-links",
    "relUrl": "/#helpful-links"
  },"24": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"25": {
    "doc": "Pull Requests",
    "title": "Pull Requests",
    "content": ". | Repository | PR | Status | . | RobertCNelson/omap-image-builder | Update packages list of Bela in configs | Open | . | rcn-ee/repos | Xenomai, seasocks Debian packages | Open | . ",
    "url": "http://localhost:4000/docs/documentation/pull-requests/#pull-requests",
    "relUrl": "/docs/documentation/pull-requests/#pull-requests"
  },"26": {
    "doc": "Pull Requests",
    "title": "Pull Requests",
    "content": ". ",
    "url": "http://localhost:4000/docs/documentation/pull-requests/",
    "relUrl": "/docs/documentation/pull-requests/"
  },"27": {
    "doc": "Week 1",
    "title": "Week 1",
    "content": "June 13 - June 19 . | Bela Cape has shipped from London, 13 June. | Attended #1 weekly meet ( Monday, 13 June, 7:30 pm IST) with mentors Giulio Moro, Vedant Paranjape, and Vaishnav Achath regarding project progress and doubts and for minutes of meet check here | BeagleBone Black arrived today evening, 15 June. | Flashed Debian console Image via microSD card (without flashing the eMMC) | . | A video conference was held to Introduce ourselves and meet this year’s students! and Jason Kridner addressed on what Beagle cares about, contributing upstream, Asking smart questions, issue submissions on blockers, weekly status reports and growing connections within and beyong the BeagleBoard.org community. Here is a meeting recording click here - 15 June, 10pm IST. | Worked on to understand the workflows of both bela-image-builder and BeagleBoard Image builder repos by rebuilding bela, beagleboard Images and spent most hours on resolving build issues, and downloading code to my build machine. | Giulio Moro pushed a couple of updates to bela-image-builder that allowed to reproduce image with out any issues. | Went through the proposal to revise the workflow and made few changes. | This week I couldn’t progress much, spent most hours on resolving build errors and downloading source to my build machine (I had low bandwidth with shared Internet access) to reproduce Bela and BeagleBoard Images and I was not much clear about my project timeline, and struggled a bit to get started and things were not excepted as thought. Although now I have better roadmapp tp move forward in project. | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/week1/#week-1",
    "relUrl": "/docs/weeklyprogress/week1/#week-1"
  },"28": {
    "doc": "Week 1",
    "title": "Week 1",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/week1/",
    "relUrl": "/docs/weeklyprogress/week1/"
  },"29": {
    "doc": "Week 2",
    "title": "Week 2",
    "content": "June 20 - June 26 . | Received Bela Cape Shipment, 20 June. | Attended #2 weekly meeting with mentors, Monday, 20 June, 4pm CEST ( 7:30 IST ) and for minutes of meet check here | Started learning how to create debian package and understand the workflow (which I had started earlier and have some knowledge about) and setuped Debian packaging development environment. | I worked on packaging Bela and Xenomai. At first, I have not been able to work on makefiles. | As these software source code have makefiles to use and build the Binaries, and looked for are there any tool that can decrease the hustle of these makefiles to build the binaries easily, so till that time, the work is on pause. | Parallely, gone through the tutorials of makefiles and with a little understanding and started working on these packages. | Packaged xenomai-v3.0.12, xenomai package is either very new and hasn’t on debian mirrors yet and it’s old package eventually got removed. | Rest this week I learned a lot about Debian packaging, makefiles, though this week was slow on the work phase but I learned a lot during this week. | . Blockers . | https://git.beagleboard.org/gsoc/building-bela-images/-/issues/1 | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/week2/#week-2",
    "relUrl": "/docs/weeklyprogress/week2/#week-2"
  },"30": {
    "doc": "Week 2",
    "title": "Week 2",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/week2/",
    "relUrl": "/docs/weeklyprogress/week2/"
  },"31": {
    "doc": "Week 3 & 4",
    "title": "Week 3 &amp; 4",
    "content": "June 27 - July 10 . | Final Exams - No Code | These two weeks I had my semester exams, most of the work is scheduled in the second half of the coding period. I couldn’t work during the exams. I planned to compensate for this by putting extra hours in the remaining period. | . Accomplishments . | Introductory Video of the Project | . Blockers . | No Blockers | . Upcoming Targets . | At least three packages updated/packaged. Bela, bb.org-overlays, ti-linux-kernel-4.14-r143 . | Setting up CI/CD for Debian packaging in git repos of Bela sources. | After packaging push packaged sources to https://rcn-ee.com apt package manager and GitHub - rcn-ee/repos: repos.rcn-ee.com | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/week3-4/#week-3--4",
    "relUrl": "/docs/weeklyprogress/week3-4/#week-3--4"
  },"32": {
    "doc": "Week 3 & 4",
    "title": "Week 3 & 4",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/week3-4/",
    "relUrl": "/docs/weeklyprogress/week3-4/"
  }
}
