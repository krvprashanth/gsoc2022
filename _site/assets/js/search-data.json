{"0": {
    "doc": "ARM Cross-Compilation on Debian x86 Machine",
    "title": "Quick-wiki: ARM Cross-Compilation on Debian x86 Machine",
    "content": ". The latest versions of DebianDebian has excellent support for cross-building through Debian Cross-toolchains ( see wiki: https://wiki.debian.org/ToolChain/Cross ). Toolchains are set of software development tools and libraries (such as gcc , gdb , glibc ) that are chained together to enable you to build executable code on one operating system on one type of machine, such as a 64-bit Linux OS on an Intel x86 machine, but to execute them on a different operating system and/or a different architecture, such as a 32-bit Linux OS on an ARM device. Debian cross toolchain is a good starting point. We can list the available toolchains as follows: . prashanth@krv:~$ apt-cache search cross-build-essential crossbuild-essential-amd64 - Informational list of cross-build-essential packages crossbuild-essential-arm64 - Informational list of cross-build-essential packages crossbuild-essential-armel - Informational list of cross-build-essential packages crossbuild-essential-armhf - Informational list of cross-build-essential packages crossbuild-essential-i386 - Informational list of cross-build-essential packages crossbuild-essential-powerpc - Informational list of cross-build-essential packages crossbuild-essential-ppc64el - Informational list of cross-build-essential packages crossbuild-essential-s390x - Informational list of cross-build-essential packages crossbuild-essential-mips - Informational list of cross-build-essential packages crossbuild-essential-mips64 - Informational list of cross-build-essential packages crossbuild-essential-mips64el - Informational list of cross-build-essential packages crossbuild-essential-mips64r6 - Informational list of cross-build-essential packages crossbuild-essential-mips64r6el - Informational list of cross-build-essential packages crossbuild-essential-mipsel - Informational list of cross-build-essential packages crossbuild-essential-mipsr6 - Informational list of cross-build-essential packages crossbuild-essential-mipsr6el - Informational list of cross-build-essential packages . The main purpose of these packages is to allow cross-compiling of Linux programs for different architecture distributions, but these can be used also for bare metal programming. One thing to be aware is the fact that the compiler by default tries to link the Linux standard C libraries that in bare metal programming have no use. Here, I’m using ARM hard float ( armhf ) package for writing programs that is deployed to the Beagle boards. prashanth@krv:~$ sudo apt install crossbuild-essential-armhf Preparing to unpack .../crossbuild-essential-armhf_12.9_all.deb ... Unpacking crossbuild-essential-armhf (12.9) ... Setting up crossbuild-essential-armhf (12.9) ... Test installation by calling the compiler directly. prashanth@krv:~$ arm-linux-gnueabihf-g++ -v COLLECT_GCC=arm-linux-gnueabihf-g++ Thread model: posix gcc version 10.2.1 20210110 (Debian 10.2.1-6) . I’m writing a short C++ program, testcross.cpp , which can be compiled into binary code using the cross-compiler. prashanth@krv:~$ gedit testcross.cpp prashanth@krv:~$ more testcross.cpp #include&lt;iostream&gt; using namespace std; int main(){ cout &lt;&lt; \"Testing cross compilation for armhf\" &lt;&lt; endl; return 0; } prashanth@krv:~$ arm-linux-gnueabihf-g++ testcross.cpp -o testcross prashanth@krv:~$ ls -l testcross* -rwxr-xr-x 1 prashanth prashanth 9064 Apr 5 13:02 testcross -rw-r--r-- 1 prashanth prashanth 119 Apr 5 13:00 testcross.cpp . The binary file has an executable flag, but when the binary is invoked, it fails to execute. This is unsurprising, as we are attempting to execute ARM binary instructions on an Intel x86 machine. prashanth@krv:~$ ./testcross arm-binfmt-P: Could not open '/lib/ld-linux-armhf.so.3': No such file or directory . This error indicates that the ld-linux-armhf.so.3 file is not in the system library directory. A search of the filesystem locates it in the /usr/arm-linux-gnueabihf/lib/ directory. prashanth@krv:~$ stat /usr/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3 File: /usr/arm-linux-gnueabihf/lib/ld-linux-armhf.so.3 -&gt; ld-2.31.so Size: 10 Blocks: 0 IO Block: 4096 symbolic link Device: b302h/45826d Inode: 1447823 Links: 1 Access: (0777/lrwxrwxrwx) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2022-04-05 13:02:21.727259593 +0530 Modify: 2021-03-03 17:24:20.000000000 +0530 Change: 2022-03-29 20:49:01.659052574 +0530 Birth: 2022-03-29 20:49:01.631052872 +0530 . One approach to solve this issue is to explicitly call the QEMU tool and specify the library directory, whereupon the program is emulated correctly. prashanth@krv:~$ qemu-arm-static -L /usr/arm-linux-gnueabihf/ testcross Testing cross compilation for armhf . Success! If we see this output, then we are able to build a binary on the x86 machine that can be executed directly on the ARM machine. ",
    "url": "http://localhost:4000/docs/documentation/ARM%20Cross-Compilation%20on%20Debian%20x86%20Machine/#quick-wiki-arm-cross-compilation-on-debian-x86-machine",
    "relUrl": "/docs/documentation/ARM%20Cross-Compilation%20on%20Debian%20x86%20Machine/#quick-wiki-arm-cross-compilation-on-debian-x86-machine"
  },"1": {
    "doc": "ARM Cross-Compilation on Debian x86 Machine",
    "title": "ARM Cross-Compilation on Debian x86 Machine",
    "content": ". ",
    "url": "http://localhost:4000/docs/documentation/ARM%20Cross-Compilation%20on%20Debian%20x86%20Machine/",
    "relUrl": "/docs/documentation/ARM%20Cross-Compilation%20on%20Debian%20x86%20Machine/"
  },"2": {
    "doc": "Community Bonding Period",
    "title": "Community Bonding Period",
    "content": "May 20 - June 12 . | GSoC 2022 accepted Contributors announced! | My GSoC proposal Building Bela Images accepted. | Sent shipping address details to the org and mentor. | Community Bonding Period begined, a video conference was held with BeagleBoard Community members, mentors and accepted students of GSoC’22. | Created this project web page. | Read the Building Beagle-based embedded linux systems. | Started reading about U-Boot, Debootstrap and study how to use it. | I have to read and write bash scripts during the project. Read these books/guides to Improve bash/command-line skills. | https://linuxcommand.org/tlcl.php | https://www.gnu.org/software/bash/manual/bash.pdf | https://en.wikibooks.org/wiki/Bash_Shell_Scripting | . | Attended GSoC 2022 Contributor Summit. | Reached out to mentors regarding the following: . | How often we should have meeting for the project progress and doubts. | And, also to schedule a meet with Bela community as well as I really wanna know a lot, and to trully understand the motive behind the Bela platform. | Scheduled a calender Invite for rugular weekly meeting with mentors. | . | Last community bonding meet was in BeagleBoard slack channel. | Created an account in BeagleBoard gitlab Instance https://git.beagleboard.org and a project repo up here for issue tracking of the blockers while building Images. | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/Community%20Bonding%20Period/#community-bonding-period",
    "relUrl": "/docs/weeklyprogress/Community%20Bonding%20Period/#community-bonding-period"
  },"3": {
    "doc": "Community Bonding Period",
    "title": "Community Bonding Period",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/Community%20Bonding%20Period/",
    "relUrl": "/docs/weeklyprogress/Community%20Bonding%20Period/"
  },"4": {
    "doc": "Pre Selection",
    "title": "Pre Selection",
    "content": ". | I came across the BeagleBoard project for this year’s Google Summer of Code and found the project titled Building Bela Images quite interesting to me and i checked BeagleBoard/GSoC/Ideas-2022 wiki to find are there any initial application tasks to do anything related to Building Bela Image and asked in beagleboard-gsoc slack channel to provide me with some small tasks related to the project to do. | Got in touch with Giulio Moro and Dhruva Gole, started looking at Bela Platform projects and tried to understand the sprit behind these debian based distributions (bela, beagleboard images) and listed out features, somehow got familiar with code base. | Setuped build environment on my machine to rebuild bela, beagleboard images and I tried some ways to boot Images using QEMU emulator and that didn’t worked out as I don’t have hardware to test the image. | I acquainted myself with BeagleBoard.org and Bela.io and what products and services they both offer. | Drafted my proposal and asked for suggestion and feedback from Guiliomoro and Dhruva Goel. | After, feedback I updated my proposal with necessary corrections and necessary topics to work on as mentioned and submitted proposal on GSoC website. | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/Pre%20Selection/#pre-selection",
    "relUrl": "/docs/weeklyprogress/Pre%20Selection/#pre-selection"
  },"5": {
    "doc": "Pre Selection",
    "title": "Pre Selection",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/Pre%20Selection/",
    "relUrl": "/docs/weeklyprogress/Pre%20Selection/"
  },"6": {
    "doc": "Weekly Progress",
    "title": "Weekly Progress",
    "content": "These are the logs of my project, where I provide weekly updates on the work done. ",
    "url": "http://localhost:4000/docs/weeklyprogress/",
    "relUrl": "/docs/weeklyprogress/"
  },"7": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": "My day to day ramblings, learnings and research in building embedded Linux systems . ",
    "url": "http://localhost:4000/docs/documentation/",
    "relUrl": "/docs/documentation/"
  },"8": {
    "doc": "Blog",
    "title": "Blog | Google Summer of Code 2022",
    "content": "My Journey with Bela &amp; BeagleBoard . ",
    "url": "http://localhost:4000/docs/blog/#blog--google-summer-of-code-2022",
    "relUrl": "/docs/blog/#blog--google-summer-of-code-2022"
  },"9": {
    "doc": "Blog",
    "title": "Blog",
    "content": " ",
    "url": "http://localhost:4000/docs/blog/",
    "relUrl": "/docs/blog/"
  },"10": {
    "doc": "Home",
    "title": "GSoC’2022 | BeagleBoard.org",
    "content": " ",
    "url": "http://localhost:4000/#gsoc2022--beagleboardorg",
    "relUrl": "/#gsoc2022--beagleboardorg"
  },"11": {
    "doc": "Home",
    "title": "Building Bela Images",
    "content": ". Hello people! I am Kurva Prashant, a third-year undergraduate student of the Vidya Jyothi Institute of Technology, Hyderabad, India. I am glad to share that I have been accepted for Google Summer of Code 2022 at BeagleBoard.org and I am really excited to spend this summer well contributing to FOSS and working on the project “Building Bela Images”. This web page describes my journey with Bela, BeagleBoard and the project which I contributing for in Google Summer of Code 2022. This was my first time to apply for GSoC and it was such a delight to get accepted, and I hope I can contribute to the project, achieving the desired goals. My project is co-mentored by Giulio Moro, Vedant Paranjape, and Vaishnav Achath from the following organizations: . | BELA | BeagleBoard | . ",
    "url": "http://localhost:4000/#building-bela-images",
    "relUrl": "/#building-bela-images"
  },"12": {
    "doc": "Home",
    "title": "My Introduction to GNU/Linux",
    "content": ". I was Introduced to the world of GNU/Linux in 2019 when I was started learning Robotics and Visual Navigation on low end machine which running “slow” due to the bloatware of windows in it. And, I stopped using the windows, removed it and started using Debian with XFCE desktop environment till then. ",
    "url": "http://localhost:4000/#my-introduction-to-gnulinux",
    "relUrl": "/#my-introduction-to-gnulinux"
  },"13": {
    "doc": "Home",
    "title": "My Introduction to Open Hardware &amp; Embedded Linux",
    "content": ". I got to know about Open Hardware and Embedded Linux while learning electronics and embedded systems part of robotics. I didn’t pay much attention to it at that time and quickly moved on. After this a short talk on Liberating SBC’s using Debian by Yuvraj at MiniDebConf India 2021 which focused on Open Source Hardware like Olimex and the Debian distributions for arm based single board computers has intrigued me to start working on Open Hardware and Embedded Linux. ",
    "url": "http://localhost:4000/#my-introduction-to-open-hardware--embedded-linux",
    "relUrl": "/#my-introduction-to-open-hardware--embedded-linux"
  },"14": {
    "doc": "Home",
    "title": "Past Experience with Debian",
    "content": ". I have an experience with Debian live build system and customized my low end machine with robotics and networking packages in which it installed Debian 11 “Bullseye” with XFCE Desktop environment on it and I’m just curious to work on low end hardware, optimise software to make run very well on resource constrained devices and also porting and enabled the Government School Computer labs in our locality to specific use of free softwares and Installing BalaSwecha OS ( A GNU/Linux distribution based on Debian ). ",
    "url": "http://localhost:4000/#past-experience-with-debian",
    "relUrl": "/#past-experience-with-debian"
  },"15": {
    "doc": "Home",
    "title": "Applying for Google Summer of Code",
    "content": ". I came to know GSoC through Swecha, a vibrant community of software users, students, academicians and software developers who determined to provide quality software built on the guidelines of free software development model. I decided to apply this year after some searching I came across the BeagleBoard project Ideas wiki for GSoC 2022 and found the project title “Building Bela Images” quite interesting to me and submitted a proposal about it. Since, I was working on Single Board Computers and linux distributions, I had the necessary experience to make this possible. Now, I will cover some information about my GSoC Project. ",
    "url": "http://localhost:4000/#applying-for-google-summer-of-code",
    "relUrl": "/#applying-for-google-summer-of-code"
  },"16": {
    "doc": "Home",
    "title": "My GSoC Project",
    "content": "Overview . I will be working on Bela Image development to make Bela Image follow more closely with BeagleBoard Images. The Bela Image development repo is heavily based and which was initially inspired by Beagleboard Image-builder scripts. Currently, the Beagle board Image development repo diverged greatly from a common functionalities of building Images. There is a requirement to “rebase” the functionalities of the Bela Image builder repo to the Beagleboard Image builder one. As the two codebases are drastically different we need to understand and “semantic rebase” the features of the Bela Image builder repo (xenomai kernel building scripts along with a bunch of other stuff) to Beagleboard Image builder repo. After these changes the Bela Image development will follow more closely with the Beagleboard Image development and as a result Bela Image will be updated more often and it minimizes future development effort. Goals . In order to add the Bela Image builder features to BeagleBoard Image builder. Firstly, I’ll be building Bela Image by using BeagleBoard Image builder scripts and making necessary changes in scripts to build Image. After this I will be getting a clear idea to where to change and semantic rebase the features of Bela Image builder to BeagleBoard Image builder one. Benefit . This project adds support for the Bela Image development to make Bela Image follow more closely with BeagleBoard Images. I mean after Bela specific changes made conditional to the Image-builder repository. The Bela Image development will be updated more often, more easily in parallel with BeagleBoard Images. ",
    "url": "http://localhost:4000/#my-gsoc-project",
    "relUrl": "/#my-gsoc-project"
  },"17": {
    "doc": "Home",
    "title": "Helpful Links",
    "content": ". | Original GSoC Project idea | https://github.com/BelaPlatform | https://github.com/RobertCNelson/Bootloader-Builder | https://github.com/RobertCNelson/omap-image-builder | http://www.denx.de/wiki/U-Boot | . ",
    "url": "http://localhost:4000/#helpful-links",
    "relUrl": "/#helpful-links"
  },"18": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },"19": {
    "doc": "Week 1",
    "title": "Week 1",
    "content": "June 13 - June 19 . | Bela Cape has shipped from London. (13 June) | Had #1 weekly meet with mentors Giulio Moro, Vedant Paranjape, and Vaishnav Achath regarding project progress and doubts. | Minutes Of Meeting Monday, 13 June, 4pm CEST ( 7:30 IST ): . | I summarised my learnings from bela build process as it is slow when i tried to reproduce and required a lot of network bandwidth and took the longest after the first run, does all downloads, including the kernal. | @Giulio Moro suggested to use sudo ./build_bela.sh –no-kernel –no-bootloader –no-build-xenomai –no-downloads In case need to re-run the build process as it saves time a lot. | And addressed some general questions from my side regarding what mentors expecting to be done in the project by first phase of coding period ends and rescheduling my timeline as I have my semester final exams from June 27 to July 6 (approax for two weeks). | . | BeagleBone Black arrived today evening. (15 June) . | Flashed Debian console Image via microSD card (without flashing the eMMC) | . | A video conference was held to introduce ourselves and meet this year’s students! and Jason Kridner addressed on what Beagle cares about, contributing upstream, Asking smart questions, issue submissions on blockers, weekly status reports and growing connections within and beyong the BeagleBoard.org community. Here is a meeting recording click here. (15 June, 10pm IST) | Worked on to understand the workflows of both bela-image-builder and BeagleBoard Image builder repos by rebuilding bela, beagleboard Images and spent most hours on resolving build issues, and downloading code to my build machine. | Giulio Moro pushed a couple of updates to bela-image-builder that allowed to reproduce image with out any issues. | Went through the proposal to revise the workflow and made few changes. | . ",
    "url": "http://localhost:4000/docs/weeklyprogress/week1/#week-1",
    "relUrl": "/docs/weeklyprogress/week1/#week-1"
  },"20": {
    "doc": "Week 1",
    "title": "Week 1",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/week1/",
    "relUrl": "/docs/weeklyprogress/week1/"
  },"21": {
    "doc": "Week 2",
    "title": "Week 2",
    "content": "June 20 - June 26 . ",
    "url": "http://localhost:4000/docs/weeklyprogress/week2/#week-2",
    "relUrl": "/docs/weeklyprogress/week2/#week-2"
  },"22": {
    "doc": "Week 2",
    "title": "Week 2",
    "content": ". ",
    "url": "http://localhost:4000/docs/weeklyprogress/week2/",
    "relUrl": "/docs/weeklyprogress/week2/"
  }
}
